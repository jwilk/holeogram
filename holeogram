#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2021 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import errno
import argparse
import sys
import os

type(lambda: (yield from []))  # Python >= 3.3 is required

def print_status(offset, length, whence):
    if length is None:
        length = ''
    whence = {
        os.SEEK_DATA: 'data',
        os.SEEK_HOLE: 'hole',
        os.SEEK_END: 'end',
    }[whence]
    print(offset, length, whence, sep='\t')

def print_map(file):
    fd = file.fileno()
    whence = os.SEEK_DATA
    offset = 0
    while True:
        whence2 = os.SEEK_HOLE ^ os.SEEK_DATA ^ whence
        try:
            offset2 = os.lseek(fd, offset, whence2)
        except OSError as exc:
            if exc.errno == errno.ENXIO:
                print_status(offset, None, os.SEEK_END)
                return
            raise
        print_status(offset, offset2 - offset, whence)
        whence = whence2
        offset = offset2

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('file', metavar='FILE', nargs='?')
    opts = ap.parse_args()
    if opts.file is None:
        if sys.stdin.isatty():
            ap.error('stdin is a tty')
        print_map(sys.stdin)
    elif opts.file == '-':
        print_map(sys.stdin)
    else:
        with open(opts.file, 'rb') as file:
            print_map(file)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
